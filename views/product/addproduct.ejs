<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Product</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">

    <style>
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 200vh;
            background-color: #156161;
        }
        
        h1 {
            text-align: center;
            margin-bottom: 20px;
            color: #ffffff;
        }

        form {
            background-color: rgba(255, 255, 255, 0.8);
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            width: 500px;
            margin-bottom: 617px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            color: black;
        }

        input, textarea, select {
            width: 100%;
            padding: 8px;
            margin-bottom: 16px;
            box-sizing: border-box;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        button {
            background-color: #014122;
            color: white;
            padding: 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        button:hover {
            background-color: #428f66;
        }

        button.back-btn {
            background-color: #014122;
            color: white;
            padding: 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-top: -5px;
        }

        button.back-btn:hover {
            background-color: #428f66;
        }

        .selected-images-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: flex-start; /* Align images horizontally */
        }

        .selected-image {
            margin-right: 10px;
            margin-bottom: 10px;
            width: 100px; /* Set the width of each image */
            height: auto; /* Maintain aspect ratio */
            border-radius: 4px;
        }

        .cancel-icon {
            position: absolute;
            top: 0;
            right: 0;
            background-color: rgba(255, 255, 255, 0.8);
            padding: 2px;
            border-radius: 50%;
            cursor: pointer;
        }

        .cancel-icon:hover {
            background-color: rgba(255, 0, 0, 0.8);
            color: white;
        }
          /* Add this CSS to make the modal smaller */
    .modal-content {
        width: 300px; /* Set the width of the modal content */
        height: auto; /* Allow height to adjust based on content */
        padding: 20px; /* Add padding for content */
    }

    #cropperImage {
        max-width: 100%; /* Ensure the image fits within the modal */
        height: auto; /* Maintain aspect ratio */
    }

    #cropButton {
        margin-top: 10px; /* Add some space between the image and the button */
    }
        
    </style>
</head>
<body>

<h1>Add Product</h1>

<form id="addProductForm" action="/addproduct" method="post" enctype="multipart/form-data">
    <label for="name">Product Name:</label>
    <input type="text" id="name" name="name" required>
    <label for="description">Description:</label>
    <textarea id="description" name="description" required></textarea>
    <label for="price">Price:</label>
    <input type="number" id="price" name="price" required min="0">
    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required min="0">
    <label for="image">Images:</label>
    <input type="file" id="image" name="image" accept="image/*" multiple onchange="displaySelectedImages(this)">
    <div class="selected-images-container" id="selectedImagesContainer"></div>
    <label for="category">Category:</label>
    <select id="category" name="category" required>
        <% categories.forEach(category => { %>
            <option value="<%= category._id %>"><%= category.name %></option>
        <% }); %>
    </select>
    <div id="errorMessages" style="color: red;"></div>

    <button type="submit" onclick="validateForm(event)">Add Product</button>
</form>

<div id="imageCropModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <img id="cropperImage" src="" alt="Image to crop">
        <button id="cropButton">Crop Image</button>
    </div>
</div>


<button class="back-btn" onclick="window.location.href='/product'">Back to Products</button>

<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>


<script>
    function validateForm(event) {
        const form = document.getElementById('addProductForm');
        const name = form.elements['name'].value.trim();
        const description = form.elements['description'].value.trim();
        const price = form.elements['price'].value.trim();
        const quantity = form.elements['quantity'].value.trim();
        const image = form.elements['image'].value.trim();
        const category = form.elements['category'].value;

        // Clear previous error messages
        document.getElementById('errorMessages').innerHTML = '';

        // Validate Name
        if (name === '') {
            displayErrorMessage('Product Name is required');
            event.preventDefault();
            return;
        }

        // Validate Description
        if (description === '') {
            displayErrorMessage('Product Description is required');
            event.preventDefault();
            return;
        }

        // Validate Price
        if (price === '' || isNaN(price) || parseFloat(price) < 0) {
            displayErrorMessage('Please enter a valid positive price');
            event.preventDefault();
            return;
        }

        // Validate Quantity
        if (quantity === '' || isNaN(quantity) || parseInt(quantity) < 0) {
            displayErrorMessage('Please enter a valid positive quantity');
            event.preventDefault();
            return;
        }

        // Validate Image
        if (!image) {
            displayErrorMessage('Product Image is required');
            event.preventDefault();
            return;
        }

        // Validate Category
        if (category === '') {
            displayErrorMessage('Product Category is required');
            event.preventDefault();
            return;
        }
    }

    function displayErrorMessage(message) {
        const errorDiv = document.getElementById('errorMessages');
        errorDiv.innerHTML += `<p>${message}</p>`;
    }

    function displaySelectedImages(input) {
        const selectedImagesContainer = document.getElementById('selectedImagesContainer');
        selectedImagesContainer.innerHTML = ''; // Clear previous selected images

        for (let i = 0; i < input.files.length; i++) {
            const image = input.files[i];
            const imageURL = URL.createObjectURL(image);
            const imageElement = document.createElement('img');
            imageElement.src = imageURL;
            imageElement.classList.add('selected-image');
            selectedImagesContainer.appendChild(imageElement);
        }
    }
</script>


<script>
function displaySelectedImages(input) {
    const selectedImagesContainer = document.getElementById('selectedImagesContainer');
    selectedImagesContainer.innerHTML = ''; // Clear previous selected images
  
    for (let i = 0; i < input.files.length; i++) {
      const image = input.files[i];
      const imageURL = URL.createObjectURL(image);
      const imageElement = document.createElement('img');
      imageElement.src = imageURL;
      imageElement.classList.add('selected-image');
  
      if (i === 0) {
        imageElement.setAttribute('data-toggle', 'modal');
        imageElement.setAttribute('data-target', '#imageCropModal');
        imageElement.setAttribute('data-src', imageURL);
      }
  
      selectedImagesContainer.appendChild(imageElement);
  
      // Initialize Cropper.js only on the first image click
      if (i === 0) {
        imageElement.addEventListener('click', function() {
          const src = this.getAttribute('data-src');
          const modalImage = document.getElementById('cropperImage');
          modalImage.src = src;
  
          const cropper = new Cropper(modalImage, {
            aspectRatio: 1 / 1, // Set your desired aspect ratio
            viewMode: 1, // Set your desired view mode
            zoomable: false, // Set whether the image can be zoomed
            crop(event) {
  const croppedImageData = cropper.getCroppedCanvas().toDataURL();
  const selectedImagesContainer = document.getElementById('selectedImagesContainer');
  const originalImage = selectedImagesContainer.children[0]; // Assuming first image (index 0)

  originalImage.src = croppedImageData;
  modal.style.display = 'none'; // Hide the modal after cropping
},
          });
        });
      }
    }
  }
</script>


<script>
    // Add an event listener to close the modal when the "X" icon is clicked
    document.addEventListener('DOMContentLoaded', function () {
        const closeButton = document.querySelector('.close');
        const modal = document.getElementById('imageCropModal');

        closeButton.addEventListener('click', function () {
            modal.style.display = 'none';
        });
    });
</script>







</body>
</html>
